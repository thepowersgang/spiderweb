/*
 * SpiderWeb
 * - By John Hodge (thePowersGang)
 * 
 * Template Object
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <spiderweb_internal.h>
#include <template/template_common.h>

@NAMESPACE SpiderWeb
@{

@CLASS Template
@{

@CONSTRUCTOR ()
@{
	tSpiderObject	*ret;
	t_obj_Template	*info;
	
	ret = SpiderScript_AllocateObject(Script, @CLASSPTR, sizeof(t_obj_Template));
	if(!ret)	@RETURN NULL;	// TODO: Exception
	
	info = ret->OpaqueData;
	info->Script = Script;
	info->ValueMap.FirstEnt = NULL;
	info->IteratorValues.FirstEnt = NULL;
	
	@RETURN ret;
@}

@DESTRUCTOR
@{
	t_obj_Template	*info = this->OpaqueData;
	
	Template_int_FreeMap( &info->ValueMap );
	for( t_filter *f = info->Filters, *n; f; f = n )
	{
		n = f->Next;
		free(f);
	}
@}

int Template_int_AddItem(tSpiderScript *Script, t_map *Map, const char *Key, tSpiderTypeRef ValueType, const void *ValuePtr)
{
	if( !ValuePtr )
		return 0;
	
	if( SS_GETARRAYDEPTH(ValueType) )
	{
		 int	i;
		tSpiderTypeRef	type = ValueType;
		type.ArrayDepth --;
		const tSpiderArray	*array = ValuePtr;
		t_map_entry *submap = Template_int_AddMapItem_SubMap( Map, Key );
		
		for( i = 0; i < array->Length; i ++ )
		{
			char	key[10];
			snprintf(key, 10, "%i",i);
			Template_int_AddItem(Script, &submap->SubMap, key, type, SpiderScript_GetArrayPtr(array, i));
		}
	}
	else if( SS_TYPESEQUAL(ValueType, @TYPECODE(Lang.StringMap)) )
	{
		tSpiderArray	*keys;
		tSpiderString	*val;
		tSpiderTypeRef	rettype;
		 int	rv, i;
	
		// Call the ->keys() method (with the `this` parameter)	
		rv = SpiderScript_ExecuteMethod(Script, "keys", &rettype, &keys, 1, &ValueType, &ValuePtr, NULL);
		if(rv != 0)
			return -1;	// Oops?
		if( !SS_TYPESEQUAL(rettype, @TYPECODE(String[])) )
			return -1;
		
		t_map_entry *submap = Template_int_AddMapItem_SubMap( Map, Key );
		
		for( i = 0; i < keys->Length; i ++ )
		{
			tSpiderTypeRef	types[] = {ValueType, @TYPECODE(String)};
			const void	*args[] = {ValuePtr, keys->Strings[i]};
			if( !keys->Strings[i] )
				continue ;
			rv = SpiderScript_ExecuteMethod(Script, "get", &rettype, &val, 2, types, args, NULL);
			if(rv != 0 || !SS_TYPESEQUAL(rettype, @TYPECODE(String)) )
				break;
			Template_int_AddItem(Script, &submap->SubMap, keys->Strings[i]->Data, rettype, val);
			SpiderScript_DereferenceString(val);
		}
		SpiderScript_DereferenceArray(keys);
	}
	else
	{
		tSpiderString	*str = SpiderScript_CastValueToString(ValueType, ValuePtr);
		if( str == NULL ) {
			// TODO: Throw exception
			return -1;
		}
		Template_int_AddMapItem_String(Map,Key, str->Data);
		SpiderScript_DereferenceString(str);
	}
	return 0;
}

@FUNCTION void BindFilter(String Name, String Function)
@{
	t_obj_Template	*info = this->OpaqueData;
	// Sanity check arguments
	if( !Name || !Function ) {
		// TODO: Argument Exception
		return -1;
	}
	
	if( strlen(Name->Data) != Name->Length ) {
		return SpiderScript_ThrowException(
			Script, SS_EXCEPTION_GENERIC,
			"Template->BindFilter - Name contains null"
			);
	}
	if( strlen(Function->Data) != Function->Length ) {
		return SpiderScript_ThrowException(
			Script, SS_EXCEPTION_GENERIC,
			"Template->BindFilter - Function name contains null"
			);
	}
	
	// Look up the function, check it's argument types are correct
	// - String _fcn_(String )
	// - TODO: Needs something like 'SpiderScript_CheckFunction(Script, Fcn, ArgTypes, &Ident)'
	
	// Add to list (with function's pointer)
	t_filter *f;
	t_filter **prev_next_ptr = &info->Filters;
	for( f = info->Filters; f; f = f->Next )
	{
		 int	cmp = strcmp(f->Name, Name->Data);
		if( cmp == 0 ) {
			return SpiderScript_ThrowException(
				Script, SS_EXCEPTION_GENERIC,
				"Template->BindFilter - Redefinition of filter %s", f->Name
				);
		}
		// Sorted list
		if( cmp > 0 )
			break;
		prev_next_ptr = &f->Next;
	}
	
	f = malloc(sizeof(*f) + Name->Length+1 + Function->Length+1);
	f->Next = NULL;
	f->Name = (char*)(f+1);
	f->FcnPtr = NULL;
	f->BoundFcn = f->Name + Name->Length+1;
	strcpy(f->Name, Name->Data);
	strcpy(f->BoundFcn, Function->Data);
	
	f->Next = *prev_next_ptr;
	*prev_next_ptr = f;
@}

@FUNCTION void Assign(String Key, * Value)
@{
	t_obj_Template	*info = this->OpaqueData;

	Template_int_AddItem(Script, &info->ValueMap, Key->Data, @TYPEOF(Value), Value );
	
	@RETURN;
@}

@FUNCTION void Display(String tpl_name)
@{
	t_obj_Template	*info;
	t_template	*tpl_data;
	
	info = this->OpaqueData;

	CGI_SendHeadersOnce();
	
	// Load template into memory
	tpl_data = Template_int_Load(tpl_name->Data);
	if( !tpl_data )
	{
		printf("Unable to find template `%s`\n", tpl_name->Data);
		// TODO: Exception
	}
	else
	{
		// Cache for faster loading later?
		// Write to output filling template slots with data from param map
		Template_int_Output(info, tpl_data);
	
		// Clean up	
		Template_int_Unload(tpl_data);
	}
	
	@RETURN ;
@}

@}	// Class
@}	// Namespace SpiderWeb

// vim: ft=c
