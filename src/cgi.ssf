/*
 * SpiderWeb Scripting Suite
 * - By John Hodge (thePowersGang)
 * 
 * cgi.ssf
 * - CGI Interface
 */
#include <module_cgi.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

const char	*gsCGI_SessionDir = "/tmp/spiderweb/sessions";

@NAMESPACE CGI
@{

@FUNCTION void SetHeader(String Text)
@{
	// "QUERY_STRING" and "REQUEST_METHOD"
	if( !Text || Text->Length == 0 )
		@RETURN ;
	
	CGI_AddHeader("%.*s", Text->Length, Text->Data);
@}

@FUNCTION String URLEscape(String Input)
@{
	if( !Input )
		@RETURN NULL;

	int len = CGI_int_URLEncode(Input->Data, Input->Length, NULL);
	tSpiderString *ret = SpiderScript_CreateString(len, NULL);
	CGI_int_URLEncode(Input->Data, Input->Length, ret->Data);

	@RETURN ret;
@}

@FUNCTION String GetCookie(String Name)
@{
	 int	 i;
	if( !Name || Name->Length == 0 )
		@RETURN NULL;

	CGI_ParseCookies();

//	CGI_SendHeadersOnce();
	
	for( i = 0; i < giCGI_NCookies; i ++ )
	{
//		printf("'%.*s' == '%s'\n", (int)Name->Length, Name->Data, gaCGI_Cookies[i].Name);
		if( strncmp(gaCGI_Cookies[i].Name, Name->Data, Name->Length) != 0 )
			continue ;
		if( strlen(gaCGI_Cookies[i].Name) != Name->Length )
			continue ;
		
		@RETURN SpiderScript_CreateString(gaCGI_Cookies[i].DataLen, gaCGI_Cookies[i].Data);
	}

	@RETURN NULL;
@}

@FUNCTION void SetCookie(String Name, String Value, Integer Timeout)
@{
	if( !Name || Name->Length == 0 )
		return 0;
	if( !Value )
		return 0;
	if( Timeout < 0 )
		return 0;

	time_t	exp = time(NULL) + Timeout;
	struct tm *ts = gmtime(&exp);

	 int	nlen = CGI_int_URLEncode(Name->Data, Name->Length, NULL);
	 int	vlen = CGI_int_URLEncode(Value->Data, Value->Length, NULL);
	 int	tlen = strftime(NULL, 0, "%a, %d %b %Y %H:%M:%S %Z", ts);
	char	name[nlen+1];
	char	value[vlen+1];
	char	timeout[tlen+1];
	CGI_int_URLEncode(Name->Data, Name->Length, name); name[nlen] = '\0';
	CGI_int_URLEncode(Value->Data, Value->Length, value); value[vlen] = '\0';
	strftime(timeout, tlen+1, "%a, %d %b %Y %H:%M:%S %Z", ts);


	// Name and value need to be URI encoded
	// add header "Set-Cookie: `Name`=`Value`; expires=`date(Timeout)`; path=???
	CGI_AddHeader("Set-Cookie: %.*s=%.*s; expires=%s; path=%s", nlen, name, vlen, value, timeout, "/");
@}

@FUNCTION String GetPathInfo(Integer Index)
@{
	if( Index < 0 )
		@RETURN NULL;
	char *pathinfo = getenv("PATH_INFO");
	if( pathinfo )
	{
		while( Index && pathinfo )
		{
			pathinfo = strchr(pathinfo+1, '/');
			Index --;
		}
		if( Index == 0 && pathinfo ) {
			pathinfo ++;
			char *end = strchr(pathinfo, '/');
			size_t len = (end ? end - pathinfo : strlen(pathinfo));
			@RETURN SpiderScript_CreateString(len, pathinfo);
		}
	}
	@RETURN NULL;
@}

@FUNCTION String ReadGET(String Name)
@{
	 int	 i;

	CGI_ParseGETData();

	for( i = 0; i < giCGI_GETNArgs; i ++ )
	{
		if( strncmp(gaCGI_GETArgs[i].Name, Name->Data, Name->Length) != 0 )
			continue ;
		if( strlen(gaCGI_GETArgs[i].Name) != Name->Length )
			continue ;
		
		@RETURN SpiderScript_CreateString(gaCGI_GETArgs[i].DataLen, gaCGI_GETArgs[i].Data);
	}

	@RETURN NULL;
@}

@FUNCTION String ReadPOST(String Name)
@{
	 int	i;
	CGI_ParsePOSTData();
	
	for( i = 0; i < giCGI_POSTNArgs; i ++ )
	{
		if( strncmp(gaCGI_POSTArgs[i].Name, Name->Data, Name->Length) != 0 )
			continue ;
		if( strlen(gaCGI_POSTArgs[i].Name) != Name->Length )
			continue ;
		
		@RETURN SpiderScript_CreateString(gaCGI_POSTArgs[i].DataLen, gaCGI_POSTArgs[i].Data);
	}
	@RETURN NULL;
@}

@CLASS Session
@{
	typedef struct s_session_value
	{
		struct s_session_value	*Next;
		const tSpiderString	*Value;
		size_t	KeyLength;
		char	Key[];
	} t_session_value;
	typedef struct
	{
		t_session_value	*Values;
		const tSpiderString	*Hash;
		char	session_file[];
	} t_session_info;

//	@ATTRIBUTE String	Hash;

	static int session_hashvalid(const char *str, size_t length)
	{
		for(; length--; str++ )
		{
			if( !isalnum(*str) )
				return 0;
		}
		return 1;
	}
	static void session_makehash(char *dest, size_t length)
	{
		static const char pool[] = "abcdefghijklmnopqrstuvwxyz0123456789";
		for(; length--; dest++)
		{
			*dest = pool[rand()%sizeof(pool)];
		}
	}
	
	@CONSTRUCTOR (String Hash, String Tag)
	@{
		 int	bSaveHash = 0;
		if( !Hash ) {
//			Hash = @CALL CGI.GetCookie("SWSESSIONID");
		}
		if( !Hash || Hash->Length != 32 || !session_hashvalid(Hash->Data, Hash->Length) ) {
			if( Hash )
				SpiderScript_DereferenceString(Hash);
			Hash = SpiderScript_CreateString(32, NULL);
			session_makehash((void*)Hash->Data, 32);
			bSaveHash = 1;
		}
		else {
			// All good
		}
		if( bSaveHash ) {
//			@CALL CGI.SetCookie("SWSESSIONID", Hash, 3600);
		}
		
		// Length sanity check
		if( strnlen(Tag->Data, Tag->Length) != Tag->Length ) {
			@RETURN NULL;
		}
		// Content sanity
		if( memchr(Tag->Data, '/', Tag->Length) != NULL ) {
			@RETURN NULL;
		}

		// Get length of session path
		int pathlen = strlen(gsCGI_SessionDir) + 1 + Hash->Length + 1;
		if( Tag && Tag->Length > 0 ) {
			pathlen += Tag->Length + 1;
		}
		else {
			pathlen += 1 + 1;
		}

		// Create object
		t_session_info *info;
		tSpiderObject *this = SpiderScript_AllocateObject(Script, @CLASSPTR, sizeof(*info) + pathlen);
		if( !this )	return -1;
		info = this->OpaqueData;
		info->Values = NULL;
		info->Hash = Hash;
		
		// Create path
		strcpy(info->session_file, gsCGI_SessionDir);
		strcat(info->session_file, "/");
		strncat(info->session_file, Hash->Data, Hash->Length);
		strcat(info->session_file, "/");
		if( Tag && Tag->Length > 0 ) {
			strncat(info->session_file, Tag->Data, Tag->Length);
		}
		else {
			strcat(info->session_file, "_");
		}

//		printf("info->session_file = %s\n", info->session_file);

		// TODO: Load from a file

		@RETURN this;
	@}
	
	@DESTRUCTOR
	@{
		t_session_info *info = this->OpaqueData;
		t_session_value	*v, *n;
		
		// TODO: Write out data
		
		// Clear local values
		for(v = info->Values; v; v = n)
		{
			n = v->Next;
			SpiderScript_DereferenceString(v->Value);
			free(v);
		}
		SpiderScript_DereferenceString(info->Hash);
	@}
	
	@FUNCTION String Get(String Key)
	@{
		t_session_info *info = this->OpaqueData;
		t_session_value	*v;

		if( !Key )	@RETURN NULL;
		
		for( v = info->Values; v; v = v->Next )
		{
			if( v->KeyLength != Key->Length )
				continue ;
			if( memcmp(v->Key, Key->Data, Key->Length) != 0 )
				continue ;
			SpiderScript_ReferenceString(v->Value);
			@RETURN v->Value;
		}

		@RETURN NULL;
	@}
	
	@FUNCTION void Set(String Key, String Value)
	@{
		t_session_info *info = this->OpaqueData;
		t_session_value	*v, *p = NULL;

		if( !Key )	@RETURN ;
		
		for( v = info->Values; v; p = v, v = v->Next )
		{
			if( v->KeyLength != Key->Length )
				continue ;
			if( strncmp(v->Key, Key->Data, Key->Length) != 0 )
				continue ;
			
			SpiderScript_DereferenceString(v->Value);
			v->Value = Value;
			SpiderScript_ReferenceString(v->Value);
			
			@RETURN;
		}
		
		v = malloc( sizeof(t_session_value) + Key->Length );
		v->KeyLength = Key->Length;
		memcpy(v->Key, Key->Data, Key->Length);
		v->Value = Value;
		SpiderScript_ReferenceString(v->Value);
		v->Next = NULL;
		if(p)
			p->Next = v;
		else
			info->Values = v;
	@}
	
	@FUNCTION void Unset(String Key)
	@{
		t_session_info *info = this->OpaqueData;
		t_session_value	*v, *p = NULL;

		if( !Key )	@RETURN ;
		
		for( v = info->Values; v; p = v, v = v->Next )
		{
			if( v->KeyLength != Key->Length )
				continue ;
			if( strncmp(v->Key, Key->Data, Key->Length) != 0 )
				continue ;
			
			SpiderScript_DereferenceString(v->Value);
			p->Next = v->Next;
			free(v);
			
			@RETURN;
		}
	@}
@}

@}

// vim: ft=c

