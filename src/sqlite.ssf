/*
 * SpiderWeb Scripting Suite
 * - By John Hodge (thePowersGang)
 *
 * sqlite.ssf
 * - SQLite API
 */
#include <stdio.h>
#include <string.h>
#include <sqlite3.h>
#include <errno.h>	// hack

@NAMESPACE SpiderWeb
@{

typedef struct
{
	sqlite3	*Handle;
} t_db_obj;

typedef struct
{
	 int	nRows;
	 int	rv;
	sqlite3_stmt	*res;
	t_db_obj	*dbinfo;
} t_result_obj;

void _sw_sqlite_free_string_by_data(void *dataptr)
{
	tSpiderString	*str = (void*)((char*)dataptr - offsetof(tSpiderString,Data));
	
	SpiderScript_DereferenceString(str);
}

@CLASS SQLite
@{
	@CONSTRUCTOR (String Path)
	@{
		t_db_obj	*info;
		tSpiderObject	*this = SpiderScript_AllocateObject(Script, @CLASSPTR, sizeof(*info));
		if(!this)	return SpiderScript_ThrowException(Script, SS_EXCEPTION_BUG, "Object allocation failure");
		info = this->OpaqueData;

		 int	rv = sqlite3_open(Path->Data, &info->Handle);
		if(rv != SQLITE_OK) {
			// TODO: Exception
			SpiderScript_DereferenceObject(this);
			return SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
				"Unable to open database '%.*s' (%i)", Path->Length, Path->Data, rv);
		}
		
		@RETURN this;
	@}
	
	@DESTRUCTOR
	@{
		t_db_obj	*info = this->OpaqueData;
		sqlite3_close(info->Handle);
	@}

	@FUNCTION String LastErrorString()
	@{
		t_db_obj	*info = this->OpaqueData;
		const char *errstr = sqlite3_errmsg(info->Handle);
		@RETURN SpiderScript_CreateString(strlen(errstr), errstr);
	@}

	@FUNCTION Integer LastInsertRowID()
	@{
		t_db_obj	*info = this->OpaqueData;
		@RETURN sqlite3_last_insert_rowid(info->Handle);
	@}

	@FUNCTION SpiderWeb.SQLite.Result PrepQuery(String QueryString, ...)
	@{
		t_db_obj	*info = this->OpaqueData;
		 int	rv;

		tSpiderObject *ret;
		rv = SpiderScript_CreateObject_Type(Script, @TYPECODE(SpiderWeb.SQLite.Result).Def,
			&ret, 0, NULL, NULL, NULL);
		if( rv < 0 ) {
			// Can't construct?
			return SpiderScript_ThrowException(Script, SS_EXCEPTION_BUG,
				"SpiderWeb.SQLite->Query Error creating result");
		}
		t_result_obj	*ret_info = ret->OpaqueData;
		ret_info->dbinfo = info;
		
		// - Create prepared statement
		rv = sqlite3_prepare_v2(info->Handle, QueryString->Data, QueryString->Length, &ret_info->res, NULL);
		if( rv ) {
			// Some sort of error
			SpiderScript_DereferenceObject(ret);
			@RETURN NULL;
			// TODO: Until exceptions are supported
			//return SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
			//	"Failed creation of SQLite statement %s", sqlite3_errmsg(info->Handle));
		}
	
		 int	idx = 1;
		for( int i = 0; i < VArgC; i ++ )
		{
			tSpiderTypeRef	type = @TYPEOF([i]);
			if( SS_GETARRAYDEPTH( type ) ) {
			}
			//else if( SS_ISTYPEOBJECT( type ) )
			//{
			//	tSpiderObject	*obj = @OBJECT( [i] );
			//	rv = 
			//}
			else if( SS_ISCORETYPE(type, SS_DATATYPE_INTEGER) )
			{
				tSpiderInteger	val = @INTEGER( [i] );
				rv = sqlite3_bind_int64(ret_info->res, idx, val);
			}
			else if( SS_ISCORETYPE(type, SS_DATATYPE_STRING) )
			{
				const tSpiderString	*val = @STRING( [i] );
				SpiderScript_ReferenceString( val );
				rv = sqlite3_bind_text(ret_info->res, idx, val->Data, val->Length, _sw_sqlite_free_string_by_data);
			}
			else
			{
				SpiderScript_DereferenceObject(ret);
				return SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
					"Unhandled parameter type '%s'",
					SpiderScript_GetTypeName(Script, type));
			}
			if( rv != SQLITE_OK ) {
				// Oh...
				SpiderScript_DereferenceObject(ret);
				return SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
					"sqlite error %s", sqlite3_errmsg(info->Handle));
			}
			idx ++;
		}
	
		@RETURN ret;
	@}
	
	@FUNCTION SpiderWeb.SQLite.Result Query(String QueryString, ...)
	@{
		t_db_obj	*info = this->OpaqueData;
		 int	rv;
		tSpiderObject	*ret;
		
		// 1. Prepare a query
		tSpiderTypeRef	ret_type;
		rv = SpiderScript_ExecuteMethod(Script, "PrepQuery", &ret_type, &ret,
			NArgs, ArgTypes, Args, NULL);
		if(rv)	return rv;
		t_result_obj	*ret_info = ret->OpaqueData;
		if( !SS_TYPESEQUAL(ret_type, @TYPE(SpiderWeb.SQLite.Result)) ) {
			SpiderScript_DereferenceObject(ret);
			return SpiderScript_ThrowException(Script, SS_EXCEPTION_BUG,
				"SQLite->PrepQuery returned something other than SpiderWeb.SQLite.Result");
		}

		// 2. Execute a single step
		ret_info->rv = sqlite3_step(ret_info->res);
		if( ret_info->rv == SQLITE_DONE )
			ret_info->nRows = sqlite3_changes(info->Handle);
		else if( ret_info->rv != SQLITE_ROW ) {
			SpiderScript_DereferenceObject(ret);
			return SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
				"SpiderWeb.SQLite->Query error: 0x%x '%s' '%s'",
				ret_info->rv, sqlite3_errmsg(info->Handle), strerror(errno));
		}
		
		@RETURN ret;
	@}
	
	@FUNCTION String Escape(String Input)
	@{
		t_db_obj	*info = this->OpaqueData;
		if( !info->Handle || !Input )
			@RETURN NULL;
		
		// Should be good enough
		// - sqlite's %q format escapes embedded ' characters
		char *tmp = sqlite3_mprintf("%.*q", Input->Length, Input->Data);
		tSpiderString *ret = SpiderScript_CreateString(strlen(tmp), tmp);
		sqlite3_free(tmp);
		@RETURN ret;
	@}
@}

@NAMESPACE SQLite
@{

@CLASS Result
@{
	@CONSTRUCTOR ()
	@{
		// TODO: Somehow determine if the script constructed this?
		t_result_obj	*info;
		tSpiderObject	*ret = SpiderScript_AllocateObject(Script, @CLASSPTR, sizeof(*info));
		if(!ret)	@RETURN NULL;
		info = ret->OpaqueData;
		info->nRows = -1;
		info->res = NULL;
		info->rv = 0;
		@RETURN ret;
	@}
	
	@DESTRUCTOR
	@{
		t_result_obj	*info = this->OpaqueData;
		if( info->res )
			sqlite3_finalize(info->res);
	@}
	
	@FUNCTION void Bind( Integer Index, * Value)
	@{
		t_result_obj	*info = this->OpaqueData;
		 int	idx = Index;

		// TODO: Ensure that query hasn't been executed
		if( info->rv != 0 ) {
			// A step has been perormed, no more binding possible
		}

		// Bind value
		tSpiderTypeRef	type = @TYPEOF(Value);
		if( SS_GETARRAYDEPTH( type ) )
			;
		else if( SS_ISTYPEOBJECT( type ) )
		{
			//tSpiderString	*strval = @OBJECT( [i] );
		}
		else if( SS_ISCORETYPE(type, SS_DATATYPE_INTEGER) )
		{
			tSpiderInteger	val = @INTEGER(Value);
			sqlite3_bind_int64(info->res, idx, val);
		}
		else if( SS_ISCORETYPE(type, SS_DATATYPE_STRING) )
		{
			const tSpiderString	*val = @STRING(Value);
			SpiderScript_ReferenceString( val );
			sqlite3_bind_text(info->res, idx, val->Data, val->Length, _sw_sqlite_free_string_by_data);
		}
		else
		{
			return SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
				"Unhandled parameter type '%s'",
				SpiderScript_GetTypeName(Script, type));
		}
	@}

	@FUNCTION Boolean Run ()
	@{
		t_result_obj	*info = this->OpaqueData;
		__SS_BUGCHECK(info->res);
	
		if( info->rv != 0 )
			SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
				"Called ->Run on active query"
				);	// TODO: Exception
		
		// Query has not yet been run
		info->rv = sqlite3_step(info->res);
		if( info->rv == SQLITE_DONE || info->rv == SQLITE_ROW ) {
			@RETURN 1;
		}
		else {
			return SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
				"SpiderWeb.SQLite->Query error: 0x%x '%s' '%s'",
				info->rv, sqlite3_errmsg(info->dbinfo->Handle), strerror(errno));
			// Fall through
			@RETURN 0;
		}
	@}

	// TODO: Make this an attribute?
	@FUNCTION String GetQuery ()
	@{
		t_result_obj	*info = this->OpaqueData;
		__SS_BUGCHECK(info->res);
		const char *str = sqlite3_sql(info->res);
		@RETURN SpiderScript_CreateString(strlen(str), str);
	@}
	
	@FUNCTION Integer ResultCount ()
	@{
		t_result_obj	*info = this->OpaqueData;
		if( info->nRows == -1 ) {
			#if 1
			 int	nRows = 1;
			while( sqlite3_step(info->res) == SQLITE_ROW )
				nRows ++;
			sqlite3_reset(info->res);
			info->rv = sqlite3_step(info->res);
			info->nRows = nRows;
			#endif
		}
		@RETURN info->nRows;
	@}
	
	@FUNCTION String[] GetNextRow()
	@{
		t_result_obj	*info = this->OpaqueData;
		if(!info->res)	@RETURN NULL;
	
		if( info->rv == 0 )
			@RETURN NULL;
	
		if( info->rv != SQLITE_ROW )
		{
			if( info->rv == SQLITE_DONE )
				@RETURN NULL;	// complete
			else
				return SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
					"SQLite Error: %s", sqlite3_errmsg(info->dbinfo->Handle));
		}
		
		int nf = sqlite3_column_count(info->res);
		
		tSpiderArray *ret = SpiderScript_CreateArray(@TYPECODE(String), nf);
		if( !ret )	return SpiderScript_ThrowException(Script, SS_EXCEPTION_MEMORY,
			"SpiderWeb.SQLite.Result->GetNextRow - String[%i]", nf);
		
		for(int i = 0; i < nf; i ++ )
		{
			const void *data = sqlite3_column_blob(info->res, i);
			ret->Strings[i] = SpiderScript_CreateString(sqlite3_column_bytes(info->res, i), data);
			// don't free values from sqlite3_column_*
		}
		info->rv = sqlite3_step(info->res);
		@RETURN ret;
	@}
@}
@}

@} // SpiderWeb

// vim: ft=c
