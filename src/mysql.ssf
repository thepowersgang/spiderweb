/*
 * SpiderWeb Scripting Suite
 * - By John Hodge (thePowersGang)
 *
 * mysql.ssf
 * - MySQL API
 */
#include <mysql/mysql.h>
#include <stdio.h>
#include <string.h>

@NAMESPACE SpiderWeb
@{

typedef struct
{
	MYSQL	Handle;
} t_db_obj;

typedef struct
{
	 int	nRows;
	MYSQL_RES *res;
} t_result_obj;

int gi_mysql_object_count = 0;

@CLASS MySQL
@{
	@CONSTRUCTOR (String Server, String Username, String Password)
	@{
		t_db_obj	*info;
		tSpiderObject	*this = SpiderScript_AllocateObject(Script, @CLASSPTR, sizeof(*info));
		if(!this)	return NULL;
		info = this->OpaqueData;
		
		gi_mysql_object_count ++;

		MYSQL	*rv = mysql_init(&info->Handle);
		if(!rv) {
			SpiderScript_DereferenceObject(this);
			return SpiderScript_ThrowException(Script, SS_EXCEPTION_BUG, "mysql_init failed"), NULL;
		}
	
		// TODO: Parse server to allow different ports
		rv = mysql_real_connect(&info->Handle, Server->Data, Username->Data, Password->Data, NULL, 0, NULL, 0);
		if( !rv ) {
			SpiderScript_DereferenceObject(this);
			// TODO: Use a better exception ID
			return SpiderScript_ThrowException(Script, SS_EXCEPTION_GENERIC,
				"unable to connect to %.*s (username '%.*s', password yes)",
				Server->Length, Server->Data, Username->Length, Username->Data), NULL;
		}
		
		return this;
	@}
	
	@DESTRUCTOR
	@{
		t_db_obj	*info = this->OpaqueData;
		mysql_close(&info->Handle);
		gi_mysql_object_count --;
		if( gi_mysql_object_count == 0 )
			mysql_library_end();
	@}

	@FUNCTION String LastErrorString()
	@{
		t_db_obj	*info = this->OpaqueData;
		const char *errstr = mysql_error(&info->Handle);
		@RETURN SpiderScript_CreateString(strlen(errstr), errstr);
	@}
	
	@FUNCTION void SetDatabase(String Database)
	@{
		t_db_obj	*info = this->OpaqueData;
		int rv = mysql_select_db(&info->Handle, Database->Data);
		if( rv ) {
			// TODO: Exception
			printf("SpiderWeb.MySQL->SetDatabase Error %s\n", mysql_error(&info->Handle));
			@RETURN ;
		}
	@}

	@FUNCTION SpiderWeb.MySQL.Result Query(String QueryString)
	@{
		t_db_obj	*info = this->OpaqueData;
		 int	rv;
		
		rv = mysql_real_query(&info->Handle, QueryString->Data, QueryString->Length);
		if( rv ) {
			// Some sort of error
			// TODO: Exception
			@RETURN NULL;
		}
		
		MYSQL_RES *result = mysql_store_result(&info->Handle);
		if( result ) {
			// All good!
		}
		else if( mysql_field_count(&info->Handle) == 0 ) {
			// Success, but didn't need to return data
		}
		else {
			// Oops, didn't return data, but it should have
			// TODO: Exception
			printf("SpiderWeb.MySQL->Query Error %s\n", mysql_error(&info->Handle));
			@RETURN NULL;
		}
		
		tSpiderObject *ret;
		rv = SpiderScript_CreateObject_Type(Script, @TYPECODE(SpiderWeb.MySQL.Result).Def,
			&ret, 0, NULL, NULL, NULL);
		if( rv < 0 ) {
			// Can't construct?
			// TODO: Exception?
			printf("SpiderWeb.MySQL->Query Error creating result\n");
			@RETURN NULL;
		}
		t_result_obj	*ret_info = ret->OpaqueData;

		ret_info->res = result;
		if( result )
			ret_info->nRows = mysql_num_fields(result);
		else
			ret_info->nRows = mysql_affected_rows(&info->Handle);
		
		@RETURN ret;
	@}
	
	@FUNCTION String Escape(String Input)
	@{
		t_db_obj	*info = this->OpaqueData;
		if( !Input )
			@RETURN NULL;
		
		// This is space inefficent, but mysql_real_escape_string requires a buffer this size)
		tSpiderString *ret = SpiderScript_CreateString(Input->Length*2+1, NULL);
		ret->Length = mysql_real_escape_string(&info->Handle, ret->Data, Input->Data, Input->Length);
		@RETURN ret;
	@}
@}

@NAMESPACE MySQL
@{

@CLASS Result
@{
	@CONSTRUCTOR ()
	@{
		// TODO: Somehow determine if the script constructed this?
		t_result_obj	*info;
		tSpiderObject	*ret = SpiderScript_AllocateObject(Script, @CLASSPTR, sizeof(*info));
		if(!ret)	return NULL;
		info = ret->OpaqueData;
		info->nRows = 0;
		info->res = NULL;
		return ret;
	@}
	
	@DESTRUCTOR
	@{
		t_result_obj	*info = this->OpaqueData;
		if( info->res )
			mysql_free_result(info->res);
	@}
	
	@FUNCTION Integer ResultCount ()
	@{
		t_result_obj	*info = this->OpaqueData;
		@RETURN info->nRows;
	@}
	
	@FUNCTION String[] GetNextRow()
	@{
		t_result_obj	*info = this->OpaqueData;
		if(!info->res)	@RETURN NULL;
		
		MYSQL_ROW row = mysql_fetch_row(info->res);
		if(!row) {
			// TODO: Would this be in error?
			@RETURN NULL;
		}
		
		int nf = mysql_num_fields(info->res);
		unsigned long *lengths = mysql_fetch_lengths(info->res);
		
		tSpiderArray *ret = SpiderScript_CreateArray(@TYPECODE(String), nf);
		if( !ret )	@RETURN NULL;
		
		 int	i;
		for( i = 0; i < nf; i ++ )
		{
			if( row[i] )
				ret->Strings[i] = SpiderScript_CreateString(lengths[i], row[i]);
			else
				ret->Strings[i] = NULL;
		}
		
		@RETURN ret;
	@}
@}
@}

@} // SpiderWeb

// vim: ft=c
